;; -----------------------------------------------
;; -- variables ----------------------------------
;; -----------------------------------------------

;; -- panel
(defvar PANEL_LCHR "$HOME/.config/eww/scripts/panel")
(defvar PANEL_CPU "$HOME/.config/eww/scripts/panel")

;; -- monitor
(defvar PRIMARY_W "2650px")
(defvar PRIMARY_H "1440px")

;; -- datetime
(defpoll TIME :interval "5s" `date +\"%I:%M%P\"`)
(defpoll DATE :interval "1m" `date +\"%a, %d %b\"`)


(defpoll WINDOWNAME :interval "0.15s" `scripts/active_win_name`)
;;(defpoll WINDOWNAME_0 :interval "0.5s" `scripts/windowname_0`)
;;(defpoll WINDOWNAME_1 :interval "0.5s" `scripts/windowname_1`)

;; -- volume
(defpoll VOLICON :interval "0.5s" `scripts/vol --icon`)
(defpoll VOLUME :interval "0.5s" `scripts/vol --get`)
(defvar VOLMUTETOGGLE `scripts/vol --toggle`)

;; -- mem
(defpoll MEMICON :interval "1h" `scripts/mem --icon`)
(defpoll MEMPCT :interval "15s" `scripts/mem --gett`)
(defpoll MEMTEXT :interval "15s" `scripts/mem --getf`)

(defpoll TOPMEM :interval "10s" `scripts/panel mem-topram`)

;; -- cpu
(defpoll CPUTOTALUTIL :interval "5s" `scripts/cpu total`)
(defpoll CPUCORESUTIL :interval "5s" `scripts/cpu cores`)
(defpoll CPUTEMP :interval "5s" `scripts/cpu temp`)
(defpoll CPUICON :interval "1h" `scripts/cpu icon`)

(defvar PWR_OFF `scripts/power -s`)

;; -- workspaces
(deflisten WS_ACTIVITY_0 :initial "(box (label :text 'init'))"
    `scripts/workspaces0`)
(deflisten WS_ACTIVITY_1 :initial "(box (label :text 'init'))"
    `scripts/workspaces1`)
(defpoll SPOTIFY_ARTIST :interval "0.5s"
    `scripts/spotify_info -a`)
(defpoll SPOTIFY_TRACK :interval "0.5s"
    `scripts/spotify_info -t`)
(defpoll SPOTIFY_STATICON :interval "0.5s"
    `scripts/spotify_info -s`)

(defwidget separator []
        (box :orientation "h" :spacing 0 :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false"
            (label :class "separator" :text "/")))

(defwidget vol []
    (circular-progress :value {VOLUME  == "off" ? 0 : VOLUME} :thickness 4 :class {VOLUME  == "off" ? "trayprogred" : "trayprog"}
        (button :onclick "${VOLMUTETOGGLE}" :class "traybtn" :tooltip {VOLUME == "off" ? "mute" : "${VOLUME}%"}
            (box :class "tray" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
                (label :class "trayicon" :halign "center" :text VOLICON)))))

(defwidget ram []
    (circular-progress :value MEMPCT :thickness 4 :class "trayprog"
        (button :onclick "${PANEL_LCHR} mem" :class "traybtn" :tooltip "${MEMTEXT}"
            (box :class "tray" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
                (label :class "trayicon" :halign "center" :text MEMICON)))))

(defwidget mempanel []
    (box :class "mempanel" :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
        (label :text "memory" :halign "start" :class "mempanel_header" :show-truncated "false" :wrap "false")
        (label :text "${MEMTEXT}" :halign "start" :class "mempanel_main" :show-truncated "false" :wrap "false")
        (label :text "${MEMPCT}% used" :halign "start" :class "mempanel_sub" :show-truncated "false" :wrap "false")
        (label :text " " :halign "start" :class "mempanel_top" :show-truncated "false" :wrap "false")
        (label :text "${TOPMEM}" :valign "start" :halign "start" :class "mempanel_top_sub" :show-truncated "true" :wrap "false")))

(defwidget cpu []
   (circular-progress :value CPUTOTALUTIL :thickness 4 :class "trayprog"
        (button :onclick "${PANEL_CPU} cpu" :class "traybtn" :tooltip "${CPUTOTALUTIL}% utilization"
            (box :class "tray" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
                (label :class "trayicon" :halign "center" :text CPUICON)))))

(defwidget cpupanel []
    (box :class "cpupanel" :orientation "v" :space-evenly "false" :spacing 0 :hexpand "false" :vexpand "false"
        (label :text "processor" :halign "start" :class "processor" :show-truncated "false" :wrap "false")
        (label :text "temp: ${CPUTEMP}" :halign "start" :class "proc_sub" :show-truncated "false" :wrap "false")))

(defwidget time []
    (box :class "time" :orientation "h" :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 5
        (label :class "time_sub" :text "${TIME}" :halign "center" :valign "center" :show-truncated "false" :wrap "false")))
(defwidget date []
    (box :class "date" :orientation "h" :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 5
        (label :class "date_sub" :text "${DATE}" :halign "center" :valign "center" :show-truncated "false" :wrap "false")))
(defwidget power []
    (box :class "a" :orientation "h" :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 5
        (button :onclick "${PWR_OFF}" :class " " :tooltip "systspotify_player -d playback volume --offset 5em off"
            (box :class "" :orientation "h" :spacing 0 :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false"
                (label :class "powerbtn" :halign "center" :text "Û∞ê¶")))))

(defwidget spotify []
    (box :orientation "h" :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 5
        (separator)
        (label :class "spotify_status" :text SPOTIFY_STATICON)
        (label :class "spotify_track" :text SPOTIFY_TRACK)
        (label :class "spotify_artist" :text SPOTIFY_ARTIST)))

(defwidget right []
    (box :orientation "h" :valign "center" :halign "end" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 5
        (separator)
        (cpu)
        (ram)
        (separator)
        (vol)
        (separator)
        (time)
        (date)
        (separator)
        (power)))

(defwidget right_2 []
    (box :orientation "h" :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 5))

(defwidget workspaces_0 []
    (box :class "workspaces0" :orientation "h" :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
        (literal :content WS_ACTIVITY_0)))

(defwidget workspaces_1 []
    (box :class "workspaces0" :orientation "h" :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
        (literal :content WS_ACTIVITY_1)))

;;(defwidget windows []
;;    (box :class "windows" :orientation "h" :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false"
;;        (box :class "active_window" :orientation "h" :valign "center" :vexpand "false" :hexpand "false")))

(defwidget left []
    (box :orientation "h" :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 5
        (workspaces_0)
        (spotify)
        (separator)))

(defwidget left_2 []
    (box :orientation "h" :valign "center" :halign "start" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 5
        (workspaces_1)
        (separator)))

(defwidget center []
    (box :orientation "h" :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 5
        (label :class "active_window" :text "${WINDOWNAME}" :halign "center" :valign "center" :show-truncated "false" :wrap "false")))

(defwidget center_2 []
    (box :orientation "h" :valign "center" :halign "center" :space-evenly "false" :vexpand "false" :hexpand "false" :spacing 5
    (time)
    (date)))

(defwidget full []
    (box :class "full" :orientation "h" :space-evenly "true" :vexpand "false" :hexpand "false"
        (left)
        (center)
        (right)))

(defwidget full_2 []
    (box :class "full_2" :orientation "h" :space-evenly "true" :vexpand "false" :hexpand "false"
        (left_2)
        (center_2)
        (right_2)))

(defwindow bar_0_main
                :monitor 0
                :geometry (geometry :x "0"
                                    :y "0"
                                    :width "100%"
                                    :height "2%"
                                    :anchor "top center")
                :stacking "fg"
                :reserve (struts :distance "30px" :side "top")
                :windowtype "dock"
                :wm-ignore false
            (full))

(defwindow bar_1_main
                :monitor 1
                :geometry (geometry :x "0"
                                    :y "0"
                                    :width "100%"
                                    :height "2.6%"
                                    :anchor "top center")
                :stacking "fg"
                :reserve (struts :distance "30px" :side "top")
                :windowtype "dock"
                :wm-ignore false
            (full_2))

(defwindow mem
                :geometry (geometry :x "-20px"
                        :y "50px"
                        :anchor "top right"
                        :width "290px"
                        :height "120px")
            (mempanel))

(defwindow cpu
                :geometry (geometry :x "-20px"
                        :y "50px"
                        :anchor "top right"
                        :width "290px"
                        :height "120px")
            (cpupanel))
