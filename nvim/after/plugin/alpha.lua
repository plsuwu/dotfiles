local present, alpha = pcall(require, "alpha")
if not present then
  return
end

local header = {
  type = "text",
  val = {

[[                                                                                                ]],
[[                           ▓▓▒▒██▓▓▓▓▓▓                                                         ]],
[[                           ██░░▒▒██▒▒▒▒██                                                       ]],
[[                           ██░░▒▒▒▒██░░░░▓▓▓▓                                                   ]],
[[                           ██░░░░▒▒▒▒██░░░░▒▒██████████████▓▓                                   ]],
[[                           ██░░░░░░▒▒▒▒▓▓░░░░▒▒▒▒▓▓▓▓▓▓▓▓▓▓▒▒██░░██                             ]],
[[                           ██░░░░░░▒▒▒▒██░░░░░░░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓████                         ]],
[[                         ████░░░░▒▒▒▒██▒▒░░░░░░▒▒▒▒▒▒░░░░░░░░▒▒▒▒▒▒▓▓▓▓████                     ]],
[[                       ██▒▒████▒▒▒▒██▒▒░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░░░▒▒▓▓▓▓▓▓██                   ]],
[[                     ██▒▒▒▒██▒▒████▒▒░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░▒▒▒▒▒▒▓▓▓▓▓▓██                 ]],
[[                   ██▒▒░░▒▒██▒▒▒▒▒▒░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▓▓▒▒▒▒██               ]],
[[                 ██░░░░▒▒██▒▒░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒░░░░░░░░▒▒██             ]],
[[                 ██░░░░▒▒██▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░▒▒██           ]],
[[               ██▒▒░░▒▒██▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░▒▒░░░░██         ]],
[[               ██▓▓▒▒▒▒██░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░░░▒▒██         ]],
[[             ██▓▓▒▒░░▒▒██░░██░░░░░░░░░░░░░░░░    ██░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒██       ]],
[[             ██▒▒░░░░░░██  ██░░░░░░░░░░░░    ░░▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▓▓▓▓██       ]],
[[           ██░░░░░░░░░░██  ░░░░░░░░░░░░    ░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▓▓██       ]],
[[           ▓▓░░░░░░  ░░░░██░░▒▒░░░░▓▓    ░░░░██░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▓▓▓▓▓▓     ]],
[[           ██▓▓▒▒▒▒  ░░██████▓▓██████░░░░░░██░░░░░░▒▒░░░░░░░░░░░░░░░░▓▓▒▒▒▒▒▒▒▒░░░░░░▓▓▓▓██     ]],
[[         ▓▓▓▓▓▓░░▒▒▓▓██▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓██░░██▒▒░░░░▒▒▒▒░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒░░░░░░▒▒▓▓██     ]],
[[         ██▒▒░░░░██▒▒▒▒▒▒░░░░░░░░▒▒▒▒▒▒▒▒████▒▒▒▒░░░░▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒██     ]],
[[         ██░░░░░░██▒▒░░░░░░░░░░▒▒▒▒░░░░░░▒▒▒▒██▒▒░░░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒██   ]],
[[       ██▒▒░░▒▒██▒▒░░░░░░░░░░▒▒▒▒░░░░░░░░░░▒▒██▒▒▒▒░░▒▒████████░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒██   ]],
[[       ██▒▒░░░░██▒▒░░░░░░░░░░▒▒░░░░░░░░░░░░▒▒▒▒██▒▒████░░░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓██   ]],
[[       ██▒▒░░░░▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒████░░░░  ░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒░░░░▒▒▓▓▓▓██   ]],
[[       ██▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒██░░░░  ░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▒▒▓▓▓▓██   ]],
[[       ██▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒░░▒▒██░░  ░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▓▓▓▓██   ]],
[[       ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░▒▒██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓██   ]],
[[       ██░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░██▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▓▓▓▓██   ]],
[[       ▓▓▒▒░░░░░░░░░░▒▒░░░░░░░░░░░░▒▒▒▒▒▒░░▒▒██▒▒░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░▒▒▓▓██     ]],
[[         ██▒▒░░░░░░▒▒▒▒░░░░░░░░░░▒▒▒▒▒▒░░░░░░██▒▒░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░▒▒██     ]],
[[         ██▒▒░░░░▒▒▒▒░░░░░░░░░░▒▒▒▒▒▒░░░░░░▒▒██▒▒░░░░░░▒▒░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░▒▒▒▒██     ]],
[[         ██░░░░▒▒▓▓▒▒░░░░░░░░░░▒▒░░░░░░░░▒▒██▒▒░░░░░░░░▒▒░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░▒▒▒▒██     ]],
[[           ██▓▓▒▒▒▒░░░░░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒░░▒▒▓▓██       ]],
[[           ██▓▓▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒▓▓▓▓██       ]],
[[             ██▓▓▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░░░░░▒▒▒▒▓▓▓▓▓▓██       ]],
[[             ██▓▓▒▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓██         ]],
[[               ██▒▒▒▒░░░░░░░░░░░░░░░░░░▒▒░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░░░░░░░▒▒▓▓▓▓██         ]],
[[                 ██▒▒▒▒░░░░░░░░░░░░░░▓▓▒▒░░░░░░░░░░░░░░▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░▓▓██           ]],
[[                   ██▒▒▒▒░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░▒▒░░░░██             ]],
[[                     ██▓▓░░░░░░▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░▒▒▒▒░░░░░░░░░░░░░░▒▒▒▒██               ]],
[[                       ██▓▓▓▓▓▓▒▒▒▒▒▒░░░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒░░░░░░▓▓▓▓▓▓▒▒██                 ]],
[[                         ████▓▓▓▓▓▓▒▒░░░░░░░░░░░░░░░░░░▒▒▒▒▒▒▒▒░░▒▒▒▒▓▓▓▓████                   ]],
[[                             ██▓▓▓▓▓▓▒▒░░▒▒░░░░░░░░░░▒▒▓▓▓▓▓▓▓▓▒▒▒▒▓▓▓▓██                       ]],
[[                               ████▓▓▓▓▒▒▒▒░░░░░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓██████                         ]],
[[                                   ████████▒▒▒▒▒▒▒▒▓▓▓▓██████████                               ]],
[[                                           ████████████                                         ]],


    },
  opts = {
    position = "center",
    hl = "Comment",
  },
}

local function button(sc, txt, keybind)
  local sc_ = sc:gsub("%s", ""):gsub("SPC", "<leader>")

  local opts = {
    position = "center",
    text = txt,
    shortcut = sc,
    cursor = 6,
    width = 19,
    align_shortcut = "right",
    hl_shortcut = "Number",
    hl = "Function",
  }
  if keybind then
    opts.keymap = { "n", sc_, keybind, { noremap = true, silent = true } }
  end

  return {
    type = "button",
    val = txt,
    on_press = function()
      local key = vim.api.nvim_replace_termcodes(sc_, true, false, true)
      vim.api.nvim_feedkeys(key, "normal", false)
    end,
    opts = opts,
  }
end

local buttons = {
  type = "group",
  val = {
    button("r", "   recent                ", ":Telescope oldfiles<CR>"),
    button("f", "   search                ", ":Telescope find_files<CR>"),
    button("e", "   create                ", ":ene <BAR> startinsert<CR>"),
    button("u", "   update                ", ":PackerSync<CR>"),
    button("c", "   config                ", ":e ~/.config/nvim/<CR>"),
    button("q", "   quit                  ", ":qa!<CR>"),
  },
  opts = {
    position = "center",
    spacing = 0,
  },
}

local section = {
  header = header,
  buttons = buttons,
}

local opts = {
  layout = {
    { type = "padding", val = 4 },
    section.header,
    { type = "padding", val = 2 },
    section.buttons,
    { type = "padding", val = 2 },
    section.footer,
  },
  opts = {
    margin = 46,
  },
}

alpha.setup(opts)
